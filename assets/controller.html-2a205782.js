import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-e8aa996c.js";const t={},o=e(`<p>Controllers（控制器）是用来负责处理客户端进入的<code>request</code>，同时返回<code>response</code></p><figure><img src="https://docs.nestjs.com/assets/Controllers_1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>控制器的目标接受特定的请求。为了创建一个基础的<code>controller</code>我们使用类装饰器。</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>For quickly creating a CRUD controller with the validation built-in, you may use the CLI&#39;s <code>CRUD generator</code>: <code>nest g resource [name]</code>.</p></div><h1 id="routing" tabindex="-1"><a class="header-anchor" href="#routing" aria-hidden="true">#</a> Routing</h1><p>下面的例子，我们会使用<code>@Controller</code>装饰器，需要我们定义一个基础的<code>controller</code>。我们将指定一个可选的路由前缀cats。在Controller之前使用一个路由前缀允许我们对路由做简单的分组。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;cats&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CatsController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;This action returns all cats&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>To create a controller using the CLI, simply execute the $ <code>nest g controller [name]</code> command.</p></div><p>在findAll方法之上的@Get装饰器，告诉Nest创建一个“处理器”用于处理具体的HTTP请求。</p>`,9),c=[o];function p(i,l){return s(),a("div",null,c)}const u=n(t,[["render",p],["__file","controller.html.vue"]]);export{u as default};
